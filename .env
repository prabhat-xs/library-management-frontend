API_URL="http://localhost:8080/v1"

The setAuthToken function in api.js is typically used to set the authentication token in the request headers for all subsequent API calls. This is useful for handling authentication in your React app efficiently.

Where to use setAuthToken?

You should call setAuthToken in the following scenarios:

1. After a successful login or signup:

When the user logs in, store the token in local storage or context and set it in the API headers using setAuthToken(token).



2. On application load (to persist authentication):

When the app initializes, check if a token is stored in local storage and apply it using setAuthToken(token).



3. On logout (to remove the token):

When the user logs out, call setAuthToken(null) and remove the token from local storage.





---

Implementation in api.js

Here’s how the setAuthToken function should be defined in api.js:

import axios from "axios";

const API_URL = process.env.REACT_APP_API_URL; // Ensure you're using an env variable

export const setAuthToken = (token) => {
  if (token) {
    axios.defaults.headers.common["Authorization"] = `Bearer ${token}`;
    localStorage.setItem("token", token); // Store token for persistence
  } else {
    delete axios.defaults.headers.common["Authorization"];
    localStorage.removeItem("token"); // Clear token on logout
  }
};

// Example API function
export const fetchBooks = async () => {
  try {
    const response = await axios.get(`${API_URL}/books`);
    return response.data;
  } catch (error) {
    console.error("Error fetching books:", error);
    return [];
  }
};


---

Using setAuthToken in the App

1️⃣ After Login

In the login function (e.g., inside AuthContext.js or Login.js):

import { setAuthToken } from "../services/api";

const handleLogin = async (credentials) => {
  try {
    const response = await axios.post(`${API_URL}/auth/login`, credentials);
    const token = response.data.token;

    setAuthToken(token); // Set token in axios headers
  } catch (error) {
    console.error("Login failed", error);
  }
};

2️⃣ On App Load (Persist Login)

Inside App.js or AuthProvider.js:

import { setAuthToken } from "../services/api";

const token = localStorage.getItem("token");
if (token) {
  setAuthToken(token); // Apply stored token
}

3️⃣ On Logout

Inside AuthContext.js or Navbar.js:

const handleLogout = () => {
  setAuthToken(null); // Remove token from headers & local storage
};


---

Why use setAuthToken?

✅ Centralized authentication handling – No need to manually add tokens in every API request.
✅ Persistent login – Ensures users stay logged in even after refreshing the page.
✅ Security – Automatically clears authentication headers on logout.

Would you like me to modify any existing files accordingly?

